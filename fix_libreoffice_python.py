#!/usr/bin/env python3
"""
LibreOffice Python diagnostic and fix script for macOS.
This script helps diagnose and resolve common LibreOffice Python issues.
"""
import os
import sys
import subprocess
import platform
from pathlib import Path

def find_working_python():
    """Find a working Python with UNO support."""
    candidates = []
    
    if platform.system() == "Darwin":  # macOS
        candidates = [
            "/Applications/LibreOffice.app/Contents/Resources/python",
            "/Applications/LibreOffice.app/Contents/Frameworks/LibreOfficePython.framework/Versions/3.10/Resources/Python.app/Contents/MacOS/LibreOfficePython",
            "/opt/homebrew/lib/libreoffice/program/python",
            "/usr/local/lib/libreoffice/program/python",
        ]
        # Also try system Python with pyuno
        try:
            result = subprocess.run([sys.executable, "-c", "import uno"], 
                                  capture_output=True, timeout=5)
            if result.returncode == 0:
                candidates.insert(0, sys.executable)
        except:
            pass
    
    elif platform.system() == "Linux":
        candidates = [
            "/usr/lib/libreoffice/program/python",
            "/opt/libreoffice/program/python",
            "/snap/libreoffice/current/lib/libreoffice/program/python",
        ]
        # Try system Python with pyuno
        try:
            result = subprocess.run([sys.executable, "-c", "import uno"], 
                                  capture_output=True, timeout=5)
            if result.returncode == 0:
                candidates.insert(0, sys.executable)
        except:
            pass
    
    print("üîç Testing Python candidates...")
    for candidate in candidates:
        if not os.path.exists(candidate):
            print(f"‚ùå Not found: {candidate}")
            continue
            
        print(f"üß™ Testing: {candidate}")
        try:
            # Test with a short timeout
            result = subprocess.run([candidate, "-c", "import uno; print('SUCCESS')"], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0 and "SUCCESS" in result.stdout:
                print(f"‚úÖ Working: {candidate}")
                return candidate
            else:
                print(f"‚ùå Failed: {candidate} - {result.stderr.strip()}")
        except subprocess.TimeoutExpired:
            print(f"‚è∞ Timeout: {candidate}")
        except Exception as e:
            print(f"‚ùå Error: {candidate} - {str(e)}")
    
    return None

def install_pyuno():
    """Try to install pyuno for system Python."""
    print("\nüì¶ Attempting to install pyuno for system Python...")
    
    # Try pip install
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "pyuno"], 
                      check=True, timeout=60)
        print("‚úÖ pyuno installed successfully")
        return True
    except:
        pass
    
    # Try with homebrew python-uno
    try:
        subprocess.run(["brew", "install", "python-uno"], 
                      check=True, timeout=120)
        print("‚úÖ python-uno installed via homebrew")
        return True
    except:
        pass
    
    print("‚ùå Could not install pyuno automatically")
    return False

def create_wrapper_script(python_path):
    """Create a wrapper script that works reliably."""
    wrapper_path = "libreoffice_python.sh"
    
    content = f"""#!/bin/bash
# LibreOffice Python wrapper script
# Auto-generated by fix_libreoffice_python.py

export PYTHONPATH="/Applications/LibreOffice.app/Contents/Resources:/Applications/LibreOffice.app/Contents/Frameworks:$PYTHONPATH"
export UNO_PATH="/Applications/LibreOffice.app/Contents/MacOS"
export URE_BOOTSTRAP="vnd.sun.star.pathname:/Applications/LibreOffice.app/Contents/Resources/fundamentalrc"

# Use the working Python executable
exec "{python_path}" "$@"
"""
    
    with open(wrapper_path, "w") as f:
        f.write(content)
    
    os.chmod(wrapper_path, 0o755)
    print(f"‚úÖ Created wrapper script: {wrapper_path}")
    return wrapper_path

def main():
    print("üîß LibreOffice Python Diagnostic Tool")
    print("=" * 40)
    
    # Check platform
    if platform.system() != "Darwin":
        print("This script is designed for macOS. For other platforms, check the main setup script.")
        return
    
    # Find working Python
    working_python = find_working_python()
    
    if working_python:
        print(f"\nüéâ Found working Python: {working_python}")
        
        # Create wrapper script
        wrapper = create_wrapper_script(working_python)
        
        print(f"\nüìã Usage:")
        print(f"Instead of using the LibreOffice Python path directly, use:")
        print(f"  ./{wrapper} scripts/apply_tracked_edits_libre.py --help")
        print(f"  ./{wrapper} scripts/find_replace_list_to_csv.py --help")
        
        # Test the converter
        print(f"\nüß™ Testing converter with wrapper...")
        try:
            result = subprocess.run([f"./{wrapper}", "scripts/find_replace_list_to_csv.py", 
                                   "edits/edits_example.txt", "edits/test_wrapper.csv"],
                                  capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                print("‚úÖ Wrapper script works!")
                print(f"Output: {result.stdout.strip()}")
            else:
                print(f"‚ùå Wrapper test failed: {result.stderr}")
        except Exception as e:
            print(f"‚ùå Wrapper test error: {e}")
    
    else:
        print("\n‚ùå No working LibreOffice Python found.")
        print("\nüîß Troubleshooting steps:")
        print("1. Reinstall LibreOffice:")
        print("   brew uninstall --cask libreoffice")
        print("   brew install --cask libreoffice")
        print()
        print("2. Try installing pyuno for system Python:")
        if install_pyuno():
            print("   Retry the test now")
        print()
        print("3. Manual installation:")
        print("   Download LibreOffice from https://www.libreoffice.org/download/download/")
        print("   Make sure to install the full version, not just the viewer")

if __name__ == "__main__":
    main()
