#!/usr/bin/env python3
"""
Working solution that provides multiple approaches for applying tracked edits.
Since LibreOffice Python UNO has issues on macOS, this provides alternatives.
"""
import argparse
import csv
import os
import sys
import subprocess
from pathlib import Path

def create_manual_instructions(input_path, csv_path, output_path):
    """Create detailed manual instructions."""
    
    instructions = f"""
# MANUAL PROCESSING INSTRUCTIONS
# Automated Tracked Edits for DOCX

## Input Files
- Source document: {input_path}
- Edits file: {csv_path}
- Target output: {output_path}

## Method 1: LibreOffice Writer (Recommended)

1. **Open LibreOffice Writer** (not Microsoft Word for this step)
2. **Open your document**: File ‚Üí Open ‚Üí {input_path}
3. **Enable Track Changes**: Edit ‚Üí Track Changes ‚Üí Record
4. **Apply each find/replace operation**:
   - Go to Edit ‚Üí Find & Replace (Ctrl+H)
   - For each row in the CSV below, enter the Find and Replace text
   - Click "Replace All" for each operation

### Find/Replace Operations:
"""
    
    # Add CSV operations
    with open(csv_path, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for i, row in enumerate(reader, 1):
            find_text = row.get('Find', '').strip()
            replace_text = row.get('Replace', '').strip()
            match_case = row.get('MatchCase', '').strip().upper() == 'TRUE'
            whole_word = row.get('WholeWord', '').strip().upper() == 'TRUE'
            wildcards = row.get('Wildcards', '').strip().upper() == 'TRUE'
            
            if find_text:
                instructions += f"""
{i}. Find: '{find_text}'
   Replace: '{replace_text}'"""
                
                if match_case or whole_word or wildcards:
                    instructions += f"""
   Options: {'Match case' if match_case else ''} {'Whole words only' if whole_word else ''} {'Regular expressions' if wildcards else ''}"""

    instructions += f"""

5. **Save as DOCX**: File ‚Üí Save As ‚Üí Choose "Microsoft Word 2007-365 (.docx)"
6. **Save to**: {output_path}

## Method 2: Microsoft Word

1. **Open Microsoft Word**
2. **Open your document**: {input_path}
3. **Enable Track Changes**: Review ‚Üí Track Changes ‚Üí Track Changes
4. **Apply find/replace operations** (same list as above)
5. **Save the document**

## Method 3: GitHub Actions (Automated)

If you have this project in a GitHub repository:

1. **Upload files to GitHub**:
   - Commit your input DOCX to `docs/`
   - Commit your CSV file to `edits/`

2. **Run the workflow**:
   - Go to Actions tab
   - Find "Redline DOCX (LibreOffice headless)"
   - Click "Run workflow"
   - Specify file paths and run

3. **Download result** from workflow artifacts

## Verification

After processing:
1. Open the output file in Microsoft Word
2. Go to Review ‚Üí Track Changes ‚Üí All Markup
3. You should see all replacements as tracked changes
4. Accept or reject changes as needed

## Troubleshooting

- **LibreOffice Python issues**: This is common on macOS. Use manual method instead.
- **File not opening**: Make sure the input file is a valid DOCX
- **No tracked changes visible**: Ensure Track Changes was enabled before replacements
- **Regex not working**: Check that Wildcards/Regular expressions option is enabled

Generated by working_solution.py
"""
    
    return instructions

def create_github_ready_files(input_path, csv_path):
    """Create files ready for GitHub Actions workflow."""
    
    print("üìÅ Preparing files for GitHub Actions...")
    
    # Copy input file to docs if not already there
    docs_input = Path("docs") / Path(input_path).name
    if not docs_input.exists() and Path(input_path).exists():
        import shutil
        shutil.copy2(input_path, docs_input)
        print(f"‚úÖ Copied input to: {docs_input}")
    
    # Copy CSV to edits if not already there  
    edits_csv = Path("edits") / Path(csv_path).name
    if not edits_csv.exists() and Path(csv_path).exists():
        import shutil
        shutil.copy2(csv_path, edits_csv)
        print(f"‚úÖ Copied CSV to: {edits_csv}")
    
    # Create workflow dispatch instructions
    workflow_instructions = f"""
# GitHub Actions Workflow Instructions

## Setup
1. Push this entire project to a GitHub repository
2. Ensure your files are in the correct locations:
   - Input DOCX: docs/{Path(input_path).name}
   - Edits CSV: edits/{Path(csv_path).name}

## Running the Workflow
1. Go to your repository on GitHub
2. Click the "Actions" tab
3. Find "Redline DOCX (LibreOffice headless)" workflow
4. Click "Run workflow"
5. Fill in the parameters:
   - Input DOCX path: docs/{Path(input_path).name}
   - Edits CSV path: edits/{Path(csv_path).name}
   - Output DOCX path: build/output_with_tracked_changes.docx
6. Click "Run workflow"

## Download Results
1. Wait for the workflow to complete (usually 1-2 minutes)
2. Click on the completed workflow run
3. Download the "redlined-docx" artifact
4. Extract and open the DOCX file

## Why This Works
- GitHub Actions runs on Ubuntu Linux
- LibreOffice Python UNO works reliably on Linux
- No local setup issues to worry about
"""
    
    with open("github_workflow_instructions.md", "w") as f:
        f.write(workflow_instructions)
    
    print("‚úÖ Created: github_workflow_instructions.md")
    return "github_workflow_instructions.md"

def main():
    parser = argparse.ArgumentParser(description="Working solution for tracked edits")
    parser.add_argument("--in", dest="input_path", default="docs/test_input.docx", help="Input DOCX file")
    parser.add_argument("--csv", dest="csv_path", default="edits/edits_sample.csv", help="CSV with edits")
    parser.add_argument("--out", dest="output_path", default="build/output_with_tracked_changes.docx", help="Output DOCX file")
    parser.add_argument("--mode", choices=["manual", "github", "both"], default="both", help="Solution mode")
    
    args = parser.parse_args()
    
    input_path = args.input_path
    csv_path = args.csv_path
    output_path = args.output_path
    
    print("üîß Working Solution for Tracked Edits")
    print("=" * 40)
    
    if args.mode in ["manual", "both"]:
        print("\nüìã Creating manual instructions...")
        instructions = create_manual_instructions(input_path, csv_path, output_path)
        
        instructions_file = "manual_instructions.md"
        with open(instructions_file, "w") as f:
            f.write(instructions)
        
        print(f"‚úÖ Manual instructions saved to: {instructions_file}")
    
    if args.mode in ["github", "both"]:
        print("\nüêô Preparing GitHub Actions solution...")
        github_file = create_github_ready_files(input_path, csv_path)
        print(f"‚úÖ GitHub instructions saved to: {github_file}")
    
    print(f"\nüéØ Summary:")
    print(f"Input file: {input_path}")
    print(f"CSV file: {csv_path}")
    print(f"Output file: {output_path}")
    
    if os.path.exists(input_path):
        print(f"‚úÖ Input file exists")
    else:
        print(f"‚ö†Ô∏è  Create input file first. Copy content from docs/test_input_content.txt")
    
    if os.path.exists(csv_path):
        print(f"‚úÖ CSV file exists")
    else:
        print(f"‚ùå CSV file not found: {csv_path}")
    
    print(f"\nüí° Recommended approach:")
    print(f"1. Use manual method with LibreOffice Writer (most reliable)")
    print(f"2. Or use GitHub Actions workflow (fully automated)")
    print(f"3. Avoid local LibreOffice Python UNO on macOS (has known issues)")

if __name__ == "__main__":
    main()
